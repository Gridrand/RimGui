"use strict";(self.webpackChunkwebsite_3=self.webpackChunkwebsite_3||[]).push([[8851],{7188:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"widgets/text","title":"Text","description":"See the TextDemo class.","source":"@site/docs/widgets/text.md","sourceDirName":"widgets","slug":"/widgets/text","permalink":"/rimgui/docs/widgets/text","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"TabSet","permalink":"/rimgui/docs/widgets/tab-set"},"next":{"title":"Tree","permalink":"/rimgui/docs/widgets/texture"}}');var i=n(4848),l=n(8453);const o={},a="Text",s={},c=[];function x(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"text",children:"Text"})}),"\n",(0,i.jsx)(t.p,{children:"See the TextDemo class."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'int labelTextInt = 123;\r\nfloat labelTextFloat = 0.12345f;\r\nstring editableText = "01234";\r\n\r\n// Formatter for floating point numbers to display them with 5 decimal places\r\nreadonly FloatFormatter floatFormatter = new("F5");\r\n\r\n// Custom text style\r\nreadonly Gridrand.TextStyle textStyle = new();\r\n\r\npublic TextDemo(ManualProperties p) : base(p)\r\n{\r\n    // Applying color ranges to specific text positions\r\n    textStyle.Insert(new RangeColor(Color.Red, 1..2));\r\n    textStyle.Insert(new RangeColor(Color.Green, 3..5));\r\n}\r\n\r\npublic void Draw()\r\n{\r\n    Gui.Heading("Text");\r\n    Gui.Text("ABCDE");\r\n\r\n    using (Ctx.Horizontal())\r\n    {\r\n        // The default text width spans the entire horizontal space,\r\n        // so the width of the next text is set to match the length of the string "Left".\r\n        Gui.NextTextWidth("Left").Text("Left");\r\n        Gui.Text("Right");\r\n    }\r\n\r\n    // Specifies the text color within the scope.\r\n    using (Style.Text.Colors.Begin(Color.Green))\r\n        Gui.Text("Green");\r\n    using (Style.Text.Colors.Begin(Color.Red))\r\n        Gui.Text("Red");\r\n\r\n    // Specifies the text style within the scope.\r\n    using (Style.Text.Styles.Begin(textStyle))\r\n        Gui.Text("0123456789");\r\n\r\n    // Highlighting specific parts of text\r\n    var text = "Highlight";\r\n    var rect = Ctx.AllocateRect();\r\n    var highlightRect = CharFixedMap.GetMatchedTextRect(rect, text, "ghlig");\r\n    if (highlightRect != null)\r\n        Gui.NextRect(highlightRect.Value).Color(Color.Gray);\r\n    Gui.NextRect(rect).Text(text);\r\n\r\n    Gui.Heading("MultiLineText");\r\n    Gui.MultiLineText("1.MultiLine\\n2.MultiLine\\n3.MultiLine");\r\n\r\n    Gui.Heading("LabelText");\r\n    Gui.LabelText("LabelText int", labelTextInt);\r\n\r\n    // Formatting a float label text with the specified formatter\r\n    using (Style.TypeFormatters.Begin(floatFormatter))\r\n    {\r\n        Gui.LabelText("LabelText float", labelTextFloat);\r\n    }\r\n\r\n    // A text that becomes editable on double-click.\r\n    Gui.Heading("EditableText");\r\n    Gui.EditableText(ref editableText);\r\n\r\n    Gui.Heading("SeparatorText");\r\n\r\n    Gui.Heading("Hyperlink");\r\n    // Hyperlink example, with a range specified for clickable text\r\n    if (Gui.Hyperlink("Hyperlink", 3..7))\r\n    {\r\n        Logger.Debug("Pressed Hyperlink");\r\n    }\r\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(x,{...e})}):x(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(6540);const i={},l=r.createContext(i);function o(e){const t=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(l.Provider,{value:t},e.children)}}}]);