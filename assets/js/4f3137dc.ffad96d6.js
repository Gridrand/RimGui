"use strict";(self.webpackChunkwebsite_3=self.webpackChunkwebsite_3||[]).push([[1476],{7894:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"widgets/interactive-item","title":"InteractiveItem","description":"See the InteractiveItemDemo class.","source":"@site/docs/widgets/interactive-item.md","sourceDirName":"widgets","slug":"/widgets/interactive-item","permalink":"/rimgui/docs/widgets/interactive-item","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Input","permalink":"/rimgui/docs/widgets/input"},"next":{"title":"Label","permalink":"/rimgui/docs/widgets/label-input"}}');var i=n(4848),s=n(8453);const c={},a="InteractiveItem",o={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"interactiveitem",children:"InteractiveItem"})}),"\n",(0,i.jsx)(t.p,{children:"See the InteractiveItemDemo class."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'public void Draw()\r\n{\r\n    // Displays a heading for interactive items\r\n    Gui.Heading("InteractiveItem");\r\n    DrawInteractiveItem();\r\n\r\n    // Displays a heading for selection handling using ItemSelectUpdater\r\n    Gui.Heading("Using ItemSelectUpdater");\r\n    DrawUsingItemSelectUpdater();\r\n\r\n}\r\nvoid DrawInteractiveItem()\r\n{\r\n    // Draws an interactive item and updates the selection state\r\n    Gui.InteractiveItem(isSelectedItem);\r\n    isSelectedItem = Ctx.IsLastSelected();\r\n}\r\n\r\nvoid DrawUsingItemSelectUpdater()\r\n{\r\n    using var s = Style.SpacingYs.Begin(0f);\r\n    var itemSelectUpdater = new ItemSelectUpdater<int>(selection, Gui.Input, true);\r\n\r\n    // Iterates through the selection items and renders interactive elements\r\n    for (int i = 0; i < selection.Length; i++)\r\n    {\r\n        using var s2 = Ctx.PushId(i);\r\n\r\n        var rect = Ctx.AllocateRect();\r\n\r\n        // Draws an interactive item and checks if it\'s selected\r\n        Gui.NextRect(rect).InteractiveItem(selection.IsSelected(i));\r\n\r\n        // Updates selection state based on user interaction\r\n        itemSelectUpdater.Update(i, Ctx.IsLastPressedThisFrame());\r\n\r\n        // Logs when an item is hovered\r\n        if (Ctx.IsLastHovered())\r\n        {\r\n            Logger.Debug($"Hovered:{i}");\r\n        }\r\n\r\n        Gui.NextRect(rect).Text($"{i}");\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// Implements item selection logic.\r\n/// </summary>\r\nclass Selection : IItemSelection<int>\r\n{\r\n    readonly bool[] bools;\r\n\r\n    public int Length => bools.Length;\r\n\r\n    public Selection(int length)\r\n    {\r\n        bools = new bool[length];\r\n    }\r\n\r\n    public void Deselect(int item)\r\n    {\r\n        bools[item] = false;\r\n    }\r\n\r\n    public void DeselectAll()\r\n    {\r\n        for (int i = 0; i < bools.Length; i++)\r\n            bools[i] = false;\r\n    }\r\n\r\n    public bool IsSelected(int item)\r\n    {\r\n        return bools[item];\r\n    }\r\n\r\n    public void Select(int item)\r\n    {\r\n        bools[item] = true;\r\n    }\r\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var r=n(6540);const i={},s=r.createContext(i);function c(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);