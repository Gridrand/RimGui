"use strict";(self.webpackChunkwebsite_3=self.webpackChunkwebsite_3||[]).push([[9641],{3136:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>x,frontMatter:()=>u,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"widgets/foldout","title":"Foldout","description":"See the FoldoutDemo class.","source":"@site/docs/widgets/foldout.md","sourceDirName":"widgets","slug":"/widgets/foldout","permalink":"/rimgui/docs/widgets/foldout","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dropdown","permalink":"/rimgui/docs/widgets/dropdown"},"next":{"title":"Input","permalink":"/rimgui/docs/widgets/input"}}');var o=r(4848),i=r(8453);const u={},s="Foldout",d={},l=[];function a(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"foldout",children:"Foldout"})}),"\n",(0,o.jsx)(t.p,{children:"See the FoldoutDemo class."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:'Gui.Heading("Foldouts");\r\n\r\n// Returns true if expanded.\r\nif (Gui.Foldout())\r\n{\r\n    Gui.TextColorTexture(Properties.SampleTexture);\r\n}\r\nif (Gui.FoldoutTextButton("FoldoutTextButton"))\r\n{\r\n    Gui.TextColorTexture(Properties.SampleTexture);\r\n}\r\n// Since the Id changes when the label is different, the WidgetId is specified and fixed.\r\n// This allows the open/close state to remain fixed even if the label changes.\r\nif (Gui.FoldoutTextButton("FoldoutTextButton:" + Time.frameCount % 100 / 10, new WidgetId(hash)))\r\n{\r\n    Gui.TextColorTexture(Properties.SampleTexture);\r\n}\r\nif (Gui.FoldoutTextButton("HeaderFoldoutTextButton"))\r\n{\r\n    Gui.TextColorTexture(Properties.SampleTexture);\r\n}\r\nif (Gui.FoldoutText("FoldoutText"))\r\n{\r\n    Gui.TextColorTexture(Properties.SampleTexture);\r\n}\r\n\r\nisOpenFoldoutStatelessText = Gui.FoldoutStatelessText("FoldoutStatelessText", isOpenFoldoutStatelessText);\r\nif (isOpenFoldoutStatelessText)\r\n{\r\n    Gui.TextColorTexture(Properties.SampleTexture);\r\n}\r\n\r\nGui.Heading("Tree using FoldoutText");\r\n\r\nGui.LabelDropdown(nameof(OverrideFoldoutStatus), ref overrideFoldoutStatus);\r\nusing var p = Style.Foldout.OverrideStatuses.Begin(overrideFoldoutStatus);\r\nif (Gui.FoldoutText("0"))\r\n{\r\n    using var indent1 = Ctx.Indent();\r\n    if (Gui.FoldoutText("1"))\r\n    {\r\n        using var indent2 = Ctx.Indent();\r\n        if (Gui.FoldoutText("2"))\r\n        {\r\n            Gui.TextColorTexture(Properties.SampleTexture);\r\n        }\r\n    }\r\n}\n'})})]})}function x(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>u,x:()=>s});var n=r(6540);const o={},i=n.createContext(o);function u(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:u(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);