"use strict";(self.webpackChunkwebsite_3=self.webpackChunkwebsite_3||[]).push([[1310],{4466:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"widgets/custom-widget","title":"CustomWidget","description":"It allows you to render custom-shaped widgets instead of using predefined ones.","source":"@site/docs/widgets/custom-widget.md","sourceDirName":"widgets","slug":"/widgets/custom-widget","permalink":"/rimgui/docs/widgets/custom-widget","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Color","permalink":"/rimgui/docs/widgets/color"},"next":{"title":"Dropdown","permalink":"/rimgui/docs/widgets/dropdown"}}');var i=r(4848),o=r(8453);const s={},a="CustomWidget",d={},c=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"customwidget",children:"CustomWidget"})}),"\n",(0,i.jsx)(t.p,{children:"It allows you to render custom-shaped widgets instead of using predefined ones."}),"\n",(0,i.jsx)(t.p,{children:"See the CustomWidgetDemo class."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'public void Draw()\r\n{\r\n    var widget = Gui.NextHeight(Size.Fixed(50f)).Custom<CustomWidget>(true);\r\n    // You can change it if you like.\r\n    widget.Color = Color32.DarkBlue;\r\n\r\n    // Number of full rotations the spiral makes (e.g., 1 = one full turn, 2 = two turns)\r\n    var turns = 10;\r\n    // Number of line segments used to construct the spiral (higher = smoother)\r\n    var segments = Time.time % 50 + 10;\r\n\r\n    /// Defining the delegate as static can help avoid GC allocation every frame.\r\n    /// \r\n    /// Note: This delegate is not executed within CustomDelegate(),\r\n    ///     but rather inside <see cref="Gui.CompleteFrame"/>.\r\n    Gui.NextHeight(Size.Fixed(100f)).CustomDelegate(\r\n        segments,\r\n        turns,\r\n        static (shaper, widget2) =>\r\n        {\r\n            // Angle increment per segment\r\n            var angleStep = (MathUtil.PI * 2 * widget2.State2) / widget2.State1;\r\n            var radius = widget2.Rect.height / 2f;\r\n            var center = widget2.Rect.center;\r\n            var prev = widget2.Rect.center;\r\n\r\n            for (var i = 1; i <= widget2.State1; i++)\r\n            {\r\n                // Interpolation factor (0.0 to 1.0)\r\n                var t = (float)i / widget2.State1;\r\n                // Current angle in radians\r\n                var angle = angleStep * i;\r\n                // Radius grows gradually (linear interpolation)\r\n                var r = radius * t;\r\n                // Convert polar coordinates (r, angle) to Cartesian coordinates (x, y)\r\n                var next = center + new Vector2(MathUtil.Cos(angle) * r, MathUtil.Sin(angle) * r);\r\n\r\n                // Draw a line from the previous point to the current point\r\n                shaper.AddLine(prev, next, 2f, Color32.Gray);\r\n                prev = next;\r\n            }\r\n        },\r\n        true);\r\n}\r\n\r\nclass CustomWidget : PrimitiveWidget\r\n{\r\n    public float Time { get; set; } = 20f;\r\n    public Color32 Color { get; set; } = Color32.Gray;\r\n\r\n    public int LineCount => 5;\r\n    public float LineWidth => 10;\r\n\r\n    public override void Build(Shaper shaper)\r\n    {\r\n        for (int i = 0; i < LineCount; i++)\r\n        {\r\n            var offset = i * 20f;\r\n            var time = GridrandUnity.Time.time * Time / Rect.width;\r\n            var t = MathUtil.Repeat(time, 1f);\r\n            var x = Rect.x + offset + t * Rect.width;\r\n\r\n            shaper.AddLine(new Vector2(x, Rect.y), new Vector2(x, Rect.yMax), LineWidth, Color);\r\n        }\r\n    }\r\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var n=r(6540);const i={},o=n.createContext(i);function s(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);