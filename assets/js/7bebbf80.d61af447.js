"use strict";(self.webpackChunkwebsite_3=self.webpackChunkwebsite_3||[]).push([[4917],{3719:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>g,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"widgets/button","title":"Button","description":"See the ButtonDemo class.","source":"@site/docs/widgets/button.md","sourceDirName":"widgets","slug":"/widgets/button","permalink":"/rimgui/docs/widgets/button","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Box and Frame","permalink":"/rimgui/docs/widgets/box"},"next":{"title":"CheckBox","permalink":"/rimgui/docs/widgets/checkbox"}}');var o=n(4848),i=n(8453);const s={},u="Button",d={},c=[];function a(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"button",children:"Button"})}),"\n",(0,o.jsx)(t.p,{children:"See the ButtonDemo class."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:'void DrawButtons()\r\n{\r\n    // An empty button that draws nothing except for the button itself.\r\n    // Returns true when pressed.\r\n    if (Gui.Button())\r\n        Logger.Debug("Pressed");\r\n\r\n    if (Gui.TextButton("Button"))\r\n        Logger.Debug("Pressed");\r\n\r\n    // Set the padding of the Button within the scope.\r\n    using (Style.Button.BeginPadding(new(2, 2, 2, 2)))\r\n    {\r\n        if (Gui.NextWidthHeight(30f, 30f).SpriteButton(Properties.SampleSprite))\r\n            Logger.Debug("Pressed");\r\n    }\r\n\r\n    // Begin the button scope.\r\n    using (Gui.BeginButton())\r\n    {\r\n        Gui.Text("0");\r\n        Gui.Text("1");\r\n        Gui.Text("2");\r\n    }\r\n}\r\n\r\nvoid DrawRadioButtons()\r\n{\r\n    Gui.RadioButton(ref isOnRadioButton1);\r\n\r\n    Gui.NextWidthHeight(40f, 40f).RadioButton(ref isOnRadioButton2);\r\n\r\n    // Draw radio buttons horizontally.\r\n    using (Ctx.Horizontal())\r\n        direction = Gui.RadioButtons(direction);\r\n}\r\n\r\nvoid DrawToggleButtons()\r\n{\r\n    if (Gui.ToggleButton(ref isSelected1))\r\n    {\r\n        Logger.Debug("Pressed");\r\n    }\r\n\r\n    using (Gui.BeginToggleButton(isSelected2))\r\n    {\r\n        Gui.Text("0");\r\n        Gui.Text("1");\r\n        Gui.Text("2");\r\n    }\r\n    // Determine whether it is selected through Context.\r\n    isSelected2 = Ctx.IsLastSelected();\r\n\r\n    Gui.ToggleTextButton("ToggleTextButton", ref isSelected3);\r\n}\n'})})]})}function g(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>u});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function u(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);