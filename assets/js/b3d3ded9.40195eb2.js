"use strict";(self.webpackChunkwebsite_3=self.webpackChunkwebsite_3||[]).push([[9005],{7580:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>u,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"widgets/input","title":"Input","description":"See the InputDemo class.","source":"@site/docs/widgets/input.md","sourceDirName":"widgets","slug":"/widgets/input","permalink":"/rimgui/docs/widgets/input","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Foldout","permalink":"/rimgui/docs/widgets/foldout"},"next":{"title":"InteractiveItem","permalink":"/rimgui/docs/widgets/interactive-item"}}');var i=t(4848),a=t(8453);const o={},u="Input",s={},l=[];function c(e){const r={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"input",children:"Input"})}),"\n",(0,i.jsx)(r.p,{children:"See the InputDemo class."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'\r\n// Formatters for integer formatting examples\r\n//\r\n// General\r\nreadonly IntFormatter intFormatter_G = new("G");\r\n// Uppercase hexadecimal\r\nreadonly IntFormatter intFormatter_X = new("X");\r\n// Decimal format. Pads with leading zeros if the specified number of digits is not met\r\nreadonly IntFormatter intFormatter_D5 = new("D5");\r\n// Lowercase hexadecimal\r\nreadonly IntFormatter intFormatter_x = new("x");\r\n// Number format with thousand separators\r\nreadonly IntFormatter intFormatter_N = new("N");\r\n\r\npublic void Draw()\r\n{\r\n    // Draw numeric input fields for different types\r\n    Gui.Heading(nameof(Gui.InputNumeric));\r\n    DrawNumeric("int", ref intValue);\r\n    DrawNumeric("float", ref floatValue);\r\n    DrawNumeric("double", ref doubleValue);\r\n    DrawNumeric("uint", ref uintValue);\r\n    DrawNumeric("ulong", ref ulongValue);\r\n    DrawNumeric("byte", ref byteValue);\r\n    DrawNumeric("sbyte", ref sbyteValue);\r\n    DrawNumeric("short", ref shortValue);\r\n    DrawNumeric("ushort", ref ushortValue);\r\n    DrawNumeric("decimal", ref decimalValue);\r\n\r\n    // Draw integer formatting examples\r\n    Gui.Heading("Int format");\r\n    DrawFormat("G", ref intValue, intFormatter_G);\r\n    DrawFormat("X", ref intValue, intFormatter_X);\r\n    DrawFormat("x", ref intValue, intFormatter_x);\r\n    DrawFormat("D5", ref intValue, intFormatter_D5);\r\n    DrawFormat("N", ref intValue, intFormatter_N);\r\n\r\n    // Draw string input text\r\n    Gui.Heading("InputText");\r\n    using var rects = RectsBuilder.Ratio(0.3f).Ratio(0.7f).BuildAllocatedHorizontal();\r\n    Gui.NextRect(rects.R0).Text("text");\r\n    Gui.NextRect(rects.R1).InputText(ref stringValue);\r\n}\r\n\r\nvoid DrawFormat(string text, ref int v, IntFormatter intFormatter, [CallerLineNumber] int lineNumber = 0)\r\n{\r\n    using var rects = RectsBuilder.Ratio(0.3f).Ratio(0.7f).BuildAllocatedHorizontal();\r\n\r\n    Gui.NextRect(rects.R0).Text(text);\r\n    using var s = Style.TypeFormatters.Begin(intFormatter);\r\n    Gui.NextRect(rects.R1).InputNumeric(ref v, lineNumber);\r\n}\r\n\r\nvoid DrawNumeric<T>(string text, ref T value, [CallerLineNumber] int lineNumber = 0)\r\n{\r\n    using var rects = RectsBuilder.Ratio(0.3f).Ratio(0.7f).BuildAllocatedHorizontal();\r\n\r\n    Gui.NextRect(rects.R0).Text(text);\r\n    Gui.NextRect(rects.R1).InputNumeric(ref value, lineNumber);\r\n}\n'})})]})}function m(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>u});var n=t(6540);const i={},a=n.createContext(i);function o(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function u(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);