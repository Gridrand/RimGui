"use strict";(self.webpackChunkwebsite_3=self.webpackChunkwebsite_3||[]).push([[4463],{4576:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"widgets/texture","title":"Tree","description":"See the TreeDemo class.","source":"@site/docs/widgets/texture.md","sourceDirName":"widgets","slug":"/widgets/texture","permalink":"/rimgui/docs/widgets/texture","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Text","permalink":"/rimgui/docs/widgets/text"},"next":{"title":"Window","permalink":"/rimgui/docs/widgets/window"}}');var i=n(4848),o=n(8453);const s={},d="Tree",a={},c=[];function l(e){const r={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"tree",children:"Tree"})}),"\n",(0,i.jsx)(r.p,{children:"See the TreeDemo class."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public void Draw()\r\n{\r\n    Gui.Heading("Scroll");\r\n    {\r\n        Gui.NextHeight(Size.Fixed(150f));\r\n        // Render a scrollable tree.\r\n        if (Gui.BeginScroll())\r\n        {\r\n            //note:By holding down the Alt key while clicking Foldout, you can open / close all child elements.\r\n            Gui.Tree(scrollRoots, new(nodeDrawer, scrollSelection, nodeHandler), Ctx.GetWidgetRect());\r\n\r\n            Gui.EndScroll();\r\n        }\r\n    }\r\n\r\n    Gui.Heading("FixedScrollTree");\r\n    {\r\n        // Render a fixed-size scrollable tree.\r\n        Gui.FixedScrollTree(150, fixedScrollRoots, new(nodeDrawer, fixedScrollSelection, nodeHandler));\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// Represents a node in the tree structure.\r\n/// </summary>\r\nclass Node\r\n{\r\n    public bool IsCheck { get; set; }\r\n    public string Name { get; set; }\r\n    public List<Node> Children { get; } = new();\r\n    public bool HasChild => 0 < Children.Count;\r\n}\r\n\r\n/// <summary>\r\n/// Handles rendering of tree nodes.\r\n/// </summary>\r\nclass NodeDrawer : ITreeNodeDrawer<Node>\r\n{\r\n    readonly Gui ui;\r\n\r\n    public NodeDrawer(Gui ui)\r\n    {\r\n        this.ui = ui;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Draws a tree node.\r\n    /// </summary>\r\n    /// <param name="node">The node to draw.</param>\r\n    /// <param name="rect">The rectangle area allocated for the node.</param>\r\n    public void Draw(Node node, Rect rect)\r\n    {\r\n        using var rects = ui.RectsBuilder.Fixed(rect.height).Fit(1).BuildHorizontal(rect);\r\n        var isCheck = node.IsCheck;\r\n        ui.NextRect(rects.R0).CheckBox(ref isCheck);\r\n        node.IsCheck = isCheck;\r\n        ui.NextRect(rects.R1).Text(node.Name);\r\n    }\r\n}\r\n\r\n/// <summary>\r\n/// Handles tree node interactions, such as expanding and selecting nodes.\r\n/// </summary>\r\nclass NodeHandler : NodeHandlerBase<Node>\r\n{\r\n    public NodeHandler(InputContext input) : base(input)\r\n    {\r\n    }\r\n    public override IEnumerable<Node> GetChildren(Node node) => node.Children;\r\n}\n'})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>d});var t=n(6540);const i={},o=t.createContext(i);function s(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);