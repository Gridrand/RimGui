"use strict";(self.webpackChunkwebsite_3=self.webpackChunkwebsite_3||[]).push([[296],{7145:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"input/drag-drop","title":"Drag And Drop","description":"See the DragDropDemo class.","source":"@site/docs/input/drag-drop.md","sourceDirName":"input","slug":"/input/drag-drop","permalink":"/rimgui/docs/input/drag-drop","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Window","permalink":"/rimgui/docs/widgets/window"},"next":{"title":"Dragging","permalink":"/rimgui/docs/input/dragging"}}');var i=n(4848),a=n(8453);const o={},s="Drag And Drop",d={},p=[];function c(e){const r={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"drag-and-drop",children:"Drag And Drop"})}),"\n",(0,i.jsx)(r.p,{children:"See the DragDropDemo class."}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:'public void Draw()\r\n{\r\n    using var spaceScope = Style.SpacingYs.Begin(0f);\r\n    for (int i = 0; i < names.Length; i++)\r\n    {\r\n        using var s = Ctx.PushId(i);\r\n\r\n        DrawInsertArea(i);\r\n\r\n        Gui.Text($"{names[i]}");\r\n        // By placing the InteractiveArea in the same position as Text, \r\n        // we can make the Text itself interactive.\r\n        Gui.NextRect(Ctx.GetLastWidgetRect()).InteractiveArea();\r\n\r\n        // Drag and drop into the InteractiveArea(Text)\r\n        if (Ctx.TryDragDropLast("Key", i))\r\n        {\r\n            if (Gui.BeginAutoSizeSubWindow())\r\n            {\r\n                Gui.FixedWidthText(names[i]);\r\n                Gui.EndAutoSizeSubWindow();\r\n            }\r\n        }\r\n\r\n        /// By executing this after <see cref="Context.TryDragDropLast(string, object)"/>,\r\n        /// we enable the item being dragged to be dropped.\r\n        if (Ctx.TryDrop("Key", out var payload))\r\n        {\r\n            var tmp = names[i];\r\n            names[i] = names[(int)payload];\r\n            names[(int)payload] = tmp;\r\n\r\n            Logger.Debug($"Dropped:{i},{payload}");\r\n        }\r\n    }\r\n    DrawInsertArea(names.Length);\r\n}\r\n\r\nvoid DrawInsertArea(int insertI)\r\n{\r\n    if (names.Length < insertI)\r\n        throw new ArgumentOutOfRangeException($"{insertI}");\r\n\r\n    Gui.NextHeight(20f).Custom<InsertAreaWidget>(true);\r\n\r\n    /// Attempt to set the drop target to the rect of <see cref="InsertAreaWidget"/> and perform the insertion.\r\n    /// \r\n    /// <see cref="Context.TrySetDropTarget(string, Rect)"/> does not return true \r\n    /// unless an item is currently being dragged.\r\n    if (Ctx.TrySetDropTarget("Key", Ctx.GetLastWidgetRect()) && Ctx.TryDrop("Key", out var payload))\r\n    {\r\n        var insertArrayI = (int)payload < insertI ? insertI - 1 : insertI;\r\n        Logger.Debug($"{payload} was dropped and inserted into {insertArrayI}.");\r\n        names.MoveElement((int)payload, insertArrayI);\r\n    }\r\n}\r\n\r\nclass InsertAreaWidget : PrimitiveWidget\r\n{\r\n    public override void Build(Shaper shaper)\r\n    {\r\n        shaper.AddInnerFrameRect(Rect, 1f, Color32.Green);\r\n    }\r\n}\n'})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>s});var t=n(6540);const i={},a=t.createContext(i);function o(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);